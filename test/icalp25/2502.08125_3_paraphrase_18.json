{
  "paper": "2502.08125",
  "toprove": 3,
  "validity": 1,
  "comment": "paraphrase",
  "proof": "Let us define, for each time step $t$ from $0$ to $m$, two recursion trees. The first, denoted $\\mathcal{T}_t$, is the tree of all subproblems generated by running the offline algorithm on the predicted edge sequence $\\hat{\\sigma}_t$. The second, denoted $\\hat{\\mathcal{T}}_t$, is the recursion tree maintained by the online algorithm after $t$ edges have been inserted. Within both types of trees, every node $x$ is augmented with a balanced binary search tree that stores the distance estimates $\\hat{d}^x(v)$ for all vertices $v$ that are alive in the corresponding graph $G_x$.\n\nOur goal is to demonstrate that $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$ holds for all $t$ in the range $0, \\dots, m$. If this is true, it implies that the distance estimates at all nodes are alike in both $\\mathcal{T}_t$ and $\\hat{\\mathcal{T}}_t$. The main statement of the theorem is then a direct consequence of this equality, combined with Lemma 1 and the observation that the first $t$ elements of the predicted sequence $\\hat{\\sigma}_t$ match the actual sequence, i.e., $\\hat{\\sigma}_t(i) = \\sigma(i)$ for $i = 1, \\dots, t$.\n\nWe will proceed by induction on the time step $t$. For the base case, $t=0$, the online algorithm is initialized by executing the offline algorithm on the initial prediction $\\hat{\\sigma}_0$. Consequently, the two recursion trees are identical, $\\hat{\\mathcal{T}}_0 = \\mathcal{T}_0$. For the inductive step, let us assume for some $t \\ge 1$ that the property holds at the previous step, i.e., $\\hat{\\mathcal{T}}_{t-1} = \\mathcal{T}_{t-1}$. Our task is to prove that $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$.\n\nConsider the situation at time $t$. If the arrival of edge $e_t$ was anticipated correctly, then the predicted sequence remains unchanged, so $\\hat{\\sigma}_t = \\hat{\\sigma}_{t-1}$. In this scenario, the online algorithm makes no modifications to its recursion tree, which means $\\hat{\\mathcal{T}}_t = \\hat{\\mathcal{T}}_{t-1}$. Furthermore, because $\\hat{\\sigma}_t = \\hat{\\sigma}_{t-1}$, the corresponding offline recursion tree is also unchanged, so $\\mathcal{T}_t = \\mathcal{T}_{t-1}$. Applying the induction hypothesis, we can conclude that $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$. Therefore, let us focus on the case where the prediction was incorrect, which is when $t' = \\text{index}_{t-1}(e_t) > t$. This means the edge $e_t$ moves from position $t'$ to $t$ in the sequence. The online algorithm responds by rebuilding all subproblems associated with intervals $[l, r]$ whose midpoint $x = (l + r)/2$ is \"jumped over\" by $e_t$, along with all descendants of these subproblems.\n\nWe will now argue that the set of subproblems rebuilt by the algorithm is sufficient. To do this, we will show that any subproblem $x$ that is not rebuilt by the online algorithm (meaning it is identical in $\\hat{\\mathcal{T}}_t$ and $\\hat{\\mathcal{T}}_{t-1}$) must also be identical in the offline trees $\\mathcal{T}_t$ and $\\mathcal{T}_{t-1}$. Given that the induction hypothesis states that node $x$ is the same in $\\hat{\\mathcal{T}}_{t-1}$ and $\\mathcal{T}_{t-1}$, establishing this claim would prove that $x$ is the same in $\\hat{\\mathcal{T}}_t$ and $\\mathcal{T}_t$, which is what we need.\n\nLet's assume, for the purpose of contradiction, that there exists a subproblem corresponding to an interval $[l, r]$ with midpoint $x$ which is not rebuilt (i.e., $e_t$ does not jump over the midpoint of $[l, r]$ or any of its ancestors), yet the node $x$ differs between $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. A difference in node $x$ means that the balanced binary search trees storing the values $\\hat{d}^x(v)$ for alive vertices $v$ in $G_x$ are not the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. We can, without loss of generality, select $x$ to be a minimal such node, meaning none of its ancestors exhibit this property.\n\nBecause node $x$ is not rebuilt, it follows that none of its ancestors are rebuilt either. Due to our choice of $x$ as a minimal counterexample, all of its ancestors must be identical in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. The contents of the binary search tree at node $x$ are determined by the auxiliary graph $G'_x$. This graph's structure is defined by the alive nodes and edges within $G_x$, and the distance estimates $\\hat{d}^y(u)$ for any dead vertex $u$ that serves as the tail of an alive edge. If a vertex $u$ is dead in $G_x$, its distance estimate $\\hat{d}^x(u)$ is found in the binary search tree of one of $x$'s ancestors, say $y$, where $u$ is alive in $G_y$. Since all ancestors like $y$ are the same in both $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$, these distance estimates for dead vertices must also be the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$.\n\nA vertex is considered alive in $G_x$ precisely when it is alive in $G_l$ and $G_r$ and possesses different distance estimates at $l$ and $r$. An edge is alive in $G_x$ within the tree $\\mathcal{T}_t$ (or $\\mathcal{T}_{t-1}$) if it is one of the first $x$ edges in the sequence $\\hat{\\sigma}_t$ (or $\\hat{\\sigma}_{t-1}$) and its head vertex is alive. Given that the edge $e_t$ has not jumped over $x$, it follows that the collection of the first $x$ edges in $\\hat{\\sigma}_t$ is the same as in $\\hat{\\sigma}_{t-1}$. The determination of which vertices are alive in $G_x$ relies only on the alive vertices in $G_l$ and $G_r$. Since $l$ and $r$ are ancestors of $x$, the binary search trees containing distance estimates for alive vertices in $G_l$ and $G_r$ are identical in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. From this, we deduce that the sets of alive vertices and alive edges in $G_x$ are unchanged between $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$.\n\nSince all the inputs to the computation at node $x$—the alive vertices, the alive edges, and the distance estimates for dead vertices—are identical in both $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$, the resulting node $x$ must also be the same in both trees. This conclusion contradicts our initial assumption that $x$ was different.",
  "timestamp": "2025-09-15T12:30:24.194267"
}