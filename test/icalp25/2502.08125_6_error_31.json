{
  "paper": "2502.08125",
  "toprove": 6,
  "validity": 0,
  "comment": "error",
  "proof": "Each subproblem $[l, r]$ is rebuilt only if an edge jumps over its midpoint or the midpoint of one of its ancestors. Each subproblem has at most $\\log m$ ancestors. For each $\\tau$, it follows from Lemma 6 that the total number of rebuild events across all subproblems is at most $(\\log m)(\\tau + 2|HIGH(\\tau)|)$. From Lemma 2, we know it takes $\\tilde{O}(m \\log W/\\epsilon)$ time to rebuild all the subproblems once. Thus, the time it takes to do all the rebuilds in the online algorithm is $\\tilde{O} (m \\cdot \\min_{\\tau} \\{\\tau + |HIGH(\\tau)|\\} \\cdot \\log W/\\epsilon)$.\n\nWe must also account for the time required to maintain the distance array $D$. Consider the updates on $D$ at time $t$. If no subproblem gets rebuilt at time $t$, we only iterate through the alive vertices in $G_t$ when updating $D$. We can charge this cost to the cost of the last rebuild of subproblem $t$, as the last time subproblem $t$ was rebuilt, it had the same set of alive vertices as it has at time $t$. Otherwise, in order to update $D$, we only iterate once through the alive vertices of a subset of the subproblems that get rebuilt at time $t$, and we can charge this cost to the cost of rebuild of these subproblems at time $t$. Note that this way, each subproblem that gets rebuilt throughout all the edge insertions gets charged at most once, which means that maintaining the distance array $D$ does not have any asymptotic overhead.\n\nFinally, we need to add the time needed to update the predicted sequence $\\hat{\\sigma}$. The total number of slots an edge $e \\in \\{e_1, ..., e_m\\}$ is shifted by over all edges equals the total number of times a position $i \\in \\{1, ..., m\\}$ is jumped over for all positions. By Lemma 6, each position gets jumped over at most $\\tau+2|HIGH(\\tau)|$ times for any $\\tau$. Therefore, updating the predicted sequence takes $O(m \\cdot (\\tau+|HIGH(\\tau)|))$ time for any $\\tau$.\n\nThus, the total runtime of the algorithm is $\\tilde{O} (m \\cdot \\min_{\\tau} \\{\\tau + |HIGH(\\tau)|\\} \\cdot \\log W/\\epsilon)$.",
  "timestamp": "2025-09-15T12:33:06.807180"
}