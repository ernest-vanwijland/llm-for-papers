{
  "paper": "2502.08125",
  "toprove": 1,
  "validity": 0,
  "comment": "hallucination",
  "proof": "Let $m_y$ be the number of alive edges in a subproblem $y$. For a subproblem $[l, r]$, the time to find the alive edges and nodes in $G_x$ is $O(m_r)$, where $x$ is the midpoint of $[l, r]$. For an alive edge $e = (u, v)$ in $G_x$, if $u$ is alive in $G_x$, then inserting $e$ in $G'_x$ takes $O(1)$ time. Otherwise, the algorithm needs to recover $\\tilde{d}^r(u)$ from the lowest ancestor of $x$ in the recursion tree in which $u$ is alive in order to calculate the weight of the edge $(s, v)$ in $G'_x$. Each node $y$ in the recursion tree maintains $\\tilde{d}^y(w)$ for all alive vertices $w$ in $G_y$ in a balanced binary search tree. Therefore, the algorithm can check whether a vertex is alive in a subproblem in time $O(\\log n)$. Also, if $w$ is alive in $G_y$, it takes $O(\\log n)$ time to find $\\tilde{d}^y(w)$. Since node $x$ has at most $\\log m$ ancestors, recovering $\\tilde{d}^r(u)$ can be done in $O(\\log n \\log m)$ time by doing a binary search on the ancestors. Hence, building $G'_x$ takes $O(m_x \\log n \\log m)$ time. The time to run Dijkstraâ€™s on $G'_x$ is $O(m_x \\log n)$. Also, the time to build the balanced binary search tree corresponding to subproblem $x$ is $O(m_x \\log n)$, as the number of alive nodes in $G_x$ is bounded by the number of alive edges in $G_x$. Thus, the runtime of the algorithm is bounded by $O(\\log n \\log m)$ times the total number of alive edges in all the subproblems.\n\nFor a given $i$ and $v$, let $x$ be the time when $d(v)$ decreases from $(1 + \\epsilon / \\log m)^{i+1}$ to $(1 + \\epsilon / \\log m)^i$. Then $v$ is alive in any subproblem that contains $x$; there is at most 1 such subproblem in each level of the recursion tree. For each vertex $v$, summing over all $\\log_{1+\\epsilon/\\log m}(nW) = O(\\log(nW) \\log m/\\epsilon)$ values of $i$ and the $\\log m$ levels of the recursion tree, we have that there are in total $O(\\log(nW) \\log^2 m/\\epsilon)$ subproblems in which $v$ is alive. Since an edge is only alive if its head is alive, there are only a total of $m \\log(nW) \\log^2 m/\\epsilon$ alive edges over all subproblems. Substituting $\\log m = O(\\log n)$, we obtain an aggregate running time $O(m \\log(nW) (\\log^3 n) (\\log \\log n)/\\epsilon)$.",
  "timestamp": "2025-09-15T19:24:59.565093"
}