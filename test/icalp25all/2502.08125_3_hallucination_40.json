{
  "paper": "2502.08125",
  "toprove": 3,
  "validity": 0,
  "comment": "hallucination",
  "proof": "Proof. For each time $t = 0, \\dots, m$, let $\\mathcal{T}_t$ be the recursion tree of all subproblems when the offline algorithm is run on $\\hat{\\sigma}_t$, and let $\\hat{\\mathcal{T}}_t$ be the recursion tree of the online algorithm after t edge insertions. In each of these trees, for each tree node x, the additional information of $\\hat{d}^x(v)$ for all alive vertices $v$ in $G_x$ is stored in a balanced binary search tree.\n\nWe show $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$ for all $t = 0, \\dots, m$, which proves that the distance estimates for all the nodes are similar in $\\mathcal{T}_t$ and $\\hat{\\mathcal{T}}_t$. The result then follows from Lemma 1 and the fact that $\\hat{\\sigma}_t(i) = \\sigma(i)$ for $i = 1, \\dots, t$.\n\nWe prove this by induction on $t$. For $t = 0$, since the algorithm starts by running the offline algorithm on $\\hat{\\sigma}_0$, it follows that $\\hat{\\mathcal{T}}_0 = \\mathcal{T}_0$. Let $t \\ge 1$ and assume $\\hat{\\mathcal{T}}_{t-1} = \\mathcal{T}_{t-1}$. We want to show $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$.\n\nAt time $t$, if the newly arrived edge $e_t$ was correctly predicted, we have $\\hat{\\sigma}_t = \\hat{\\sigma}_{t-1}$ and the online algorithm does not change the recursion tree, meaning that $\\hat{\\mathcal{T}}_t = \\hat{\\mathcal{T}}_{t-1}$. Also, since $\\hat{\\sigma}_t = \\hat{\\sigma}_{t-1}$, we have $\\mathcal{T}_t = \\mathcal{T}_{t-1}$, and by the induction hypothesis, we conclude that $\\hat{\\mathcal{T}}_t = \\mathcal{T}_t$. So, assume that $t' = \\text{index}_{t-1}(e_t) > t$. So $e_t$ jumps from $t'$ to $t$, and the online algorithm rebuilds all the subproblems $[l, r]$ where $e_t$ jumps over their midpoint $x = (l + r)/2$ and all their descendants.\n\nWe show that the algorithm rebuilds all the necessary subproblems. In other words, we show each subproblem $x$ that is not rebuilt, i.e., is the same in $\\hat{\\mathcal{T}}_t$ and $\\hat{\\mathcal{T}}_{t-1}$, is also the same in $\\mathcal{T}_t$ and $\\mathcal{T}_{t-1}$. Since, by the induction hypothesis, $x$ is the same in trees $\\hat{\\mathcal{T}}_{t-1}$ and $\\mathcal{T}_{t-1}$, this proves that $x$ is the same in $\\hat{\\mathcal{T}}_t$ and $\\mathcal{T}_t$, as desired.\n\nAssume for sake of contradiction that there is an interval $[l, r]$ with midpoint $x$ such that $e_t$ does not jumps over the midpoint of $[l, r]$ or the midpoint of any of the ancestors of $[l, r]$, but $x$ is different in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$, meaning that the binary search trees that store $\\hat{d}^x(v)$ for alive vertices $v$ in $G_x$ are different in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. Without loss of generality, assume no ancestor of $x$ has these properties.\n\nSince $x$ is not rebuilt, none of its ancestors is rebuilt either. By the choice of $x$, this means that all the ancestors of $x$ are the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. The binary search tree stored at $x$ depends on the auxiliary graph $G'_x$, which in turn only depends on the alive nodes and edges in $G_x$, and the distance estimates $\\hat{d}^y(u)$ for each dead vertex $u$ that is the tail of an alive edge. For any vertex $u$ that is dead in $G_x$, $\\hat{d}^x(u)$ is stored in the binary search tree of some ancestor $y$ of $x$, where $u$ is alive in $G_y$. Since $y$ is the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$, these distance estimates are the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. An edge is alive in $G_x$ in $\\mathcal{T}_t$ (respectively, $\\mathcal{T}_{t-1}$) if it is among the first $x$ edges in $\\hat{\\sigma}_t$ (respectively, $\\hat{\\sigma}_{t-1}$), and its head is alive. Since the edge $e_t$ has not jumped over $x$, the set of the first $x$ edges in $\\hat{\\sigma}_t$ is identical to that in $\\hat{\\sigma}_{t-1}$, although their relative order might have changed. The distance estimates that determine which vertices are alive are computed via a relaxation process. It is a known property of such algorithms that for a given set of edges, the final computed distances are independent of the order in which the edges are processed. Therefore, the set of alive vertices and edges in $G_x$ are the same in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$. Putting everything together, we conclude that node $x$ is similar in $\\mathcal{T}_{t-1}$ and $\\mathcal{T}_t$, which contradicts the choice of $x$.",
  "timestamp": "2025-09-15T19:26:48.180349"
}